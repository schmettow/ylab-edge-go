{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\bin\\usb_logger.rs","byte_start":697,"byte_end":713,"line_start":23,"line_end":23,"column_start":36,"column_end":52,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::Level::Info, driver);","highlight_start":36,"highlight_end":52}],"label":"unexpected argument of type `log::Level`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4300,"byte_end":4314,"line_start":141,"line_end":141,"column_start":62,"column_end":76,"is_primary":true,"text":[{"text":"            let _ = ::log::set_logger_racy(&LOGGER).map(|()| log::max_level($l));","highlight_start":62,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\bin\\usb_logger.rs","byte_start":666,"byte_end":722,"line_start":23,"line_end":23,"column_start":5,"column_end":61,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::Level::Info, driver);","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_usb_logger::run!","def_site_span":{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4062,"byte_end":4078,"line_start":137,"line_end":137,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! run {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs","byte_start":39271,"byte_end":39280,"line_start":1268,"line_end":1268,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"pub fn max_level() -> LevelFilter {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4317,"byte_end":4318,"line_start":141,"line_end":141,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"            let _ = ::log::set_logger_racy(&LOGGER).map(|()| log::max_level($l));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":{"span":{"file_name":"src\\bin\\usb_logger.rs","byte_start":666,"byte_end":722,"line_start":23,"line_end":23,"column_start":5,"column_end":61,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::Level::Info, driver);","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_usb_logger::run!","def_site_span":{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4062,"byte_end":4078,"line_start":137,"line_end":137,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! run {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usb_logger.rs:23:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    embassy_usb_logger::run!(1024, log::Level::Info, driver);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14munexpected argument of type `log::Level`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the extra argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs:1268:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn max_level() -> LevelFilter {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `embassy_usb_logger::run` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0061`.\u001b[0m\n"}
