{"message":"can't find crate for `test`","code":{"code":"E0463","explanation":"A plugin/crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: can't find crate for `test`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `embedded_hal_1`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":421,"byte_end":435,"line_start":14,"line_end":14,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use embedded_hal_1::i2c::I2c;","highlight_start":5,"highlight_end":19}],"label":"use of undeclared crate or module `embedded_hal_1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is a crate or module with a similar name","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":421,"byte_end":435,"line_start":14,"line_end":14,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use embedded_hal_1::i2c::I2c;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":"embedded_hal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: use of undeclared crate or module `embedded_hal_1`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal_1::i2c::I2c;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `embedded_hal_1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a crate or module with a similar name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10membedded_hal\u001b[0m\u001b[0m::i2c::I2c;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1723,"byte_end":1728,"line_start":59,"line_end":59,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[IODIRA, 0x00]).unwrap();","highlight_start":9,"highlight_end":14}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in the trait `defmt::Logger`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs","byte_start":4753,"byte_end":4783,"line_start":129,"line_end":129,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe fn write(bytes: &[u8]);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1719,"byte_end":1751,"line_start":59,"line_end":59,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[IODIRA, 0x00]).unwrap();","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":"embassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[IODIRA, 0x00])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embassy_usb_driver::EndpointIn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::WriteIter;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::spi::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::spi::FullDuplex;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::asynch::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::blocking::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::Storage;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage_async::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use hash32::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:59:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i2c.write(ADDR, &[IODIRA, 0x00]).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in the trait `defmt::Logger`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs:129:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn write(bytes: &[u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use associated function syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m59\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10membassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[IODIRA, 0x00])\u001b[0m\u001b[0m.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use core::hash::Hasher;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embassy_usb_driver::EndpointIn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::Write;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::WriteIter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 18 other candidates\u001b[0m\n\n"}
{"message":"no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1771,"byte_end":1776,"line_start":60,"line_end":60,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[IODIRB, 0xff]).unwrap();","highlight_start":9,"highlight_end":14}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in the trait `defmt::Logger`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs","byte_start":4753,"byte_end":4783,"line_start":129,"line_end":129,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe fn write(bytes: &[u8]);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1767,"byte_end":1799,"line_start":60,"line_end":60,"column_start":5,"column_end":37,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[IODIRB, 0xff]).unwrap();","highlight_start":5,"highlight_end":37}],"label":null,"suggested_replacement":"embassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[IODIRB, 0xff])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embassy_usb_driver::EndpointIn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::WriteIter;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::spi::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::spi::FullDuplex;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::asynch::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::blocking::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::Storage;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage_async::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use hash32::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:60:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i2c.write(ADDR, &[IODIRB, 0xff]).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in the trait `defmt::Logger`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs:129:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn write(bytes: &[u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use associated function syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m60\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10membassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[IODIRB, 0xff])\u001b[0m\u001b[0m.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use core::hash::Hasher;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embassy_usb_driver::EndpointIn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::Write;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::WriteIter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 18 other candidates\u001b[0m\n\n"}
{"message":"no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1819,"byte_end":1824,"line_start":61,"line_end":61,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[GPPUB, 0xff]).unwrap(); // pullups","highlight_start":9,"highlight_end":14}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in the trait `defmt::Logger`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs","byte_start":4753,"byte_end":4783,"line_start":129,"line_end":129,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe fn write(bytes: &[u8]);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1815,"byte_end":1846,"line_start":61,"line_end":61,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"    i2c.write(ADDR, &[GPPUB, 0xff]).unwrap(); // pullups","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":"embassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[GPPUB, 0xff])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embassy_usb_driver::EndpointIn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::WriteIter;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::spi::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::spi::FullDuplex;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::asynch::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::blocking::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::Storage;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage_async::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use hash32::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:61:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i2c.write(ADDR, &[GPPUB, 0xff]).unwrap(); // pullups\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in the trait `defmt::Logger`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs:129:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn write(bytes: &[u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use associated function syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10membassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(ADDR, &[GPPUB, 0xff])\u001b[0m\u001b[0m.unwrap(); // pullups\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use core::hash::Hasher;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embassy_usb_driver::EndpointIn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::Write;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::WriteIter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 18 other candidates\u001b[0m\n\n"}
{"message":"no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1952,"byte_end":1957,"line_start":67,"line_end":67,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        i2c.write(mcp23017::ADDR, &[GPIOA, val]).unwrap();","highlight_start":13,"highlight_end":18}],"label":"this is an associated function, not a method","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found the following associated functions; to be used as methods, functions must have a `self` parameter","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the candidate is defined in the trait `defmt::Logger`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs","byte_start":4753,"byte_end":4783,"line_start":129,"line_end":129,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    unsafe fn write(bytes: &[u8]);","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use associated function syntax instead","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":1948,"byte_end":1988,"line_start":67,"line_end":67,"column_start":9,"column_end":49,"is_primary":true,"text":[{"text":"        i2c.write(mcp23017::ADDR, &[GPIOA, val]).unwrap();","highlight_start":9,"highlight_end":49}],"label":null,"suggested_replacement":"embassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(mcp23017::ADDR, &[GPIOA, val])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use core::hash::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embassy_usb_driver::EndpointIn;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::WriteIter;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::spi::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiBusWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::spi::SpiDeviceWrite;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::serial::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_nb::spi::FullDuplex;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::asynch::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_io::blocking::Write;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::Storage;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_storage_async::nor_flash::NorFlash;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use hash32::Hasher;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `write` found for struct `embassy_rp::i2c::I2c` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:67:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        i2c.write(mcp23017::ADDR, &[GPIOA, val]).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis is an associated function, not a method\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: found the following associated functions; to be used as methods, functions must have a `self` parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the candidate is defined in the trait `defmt::Logger`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\defmt-0.3.5\\src\\traits.rs:129:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe fn write(bytes: &[u8]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use associated function syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10membassy_rp::i2c::I2c<'_, I2C1, embassy_rp::i2c::Blocking>::write(mcp23017::ADDR, &[GPIOA, val])\u001b[0m\u001b[0m.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use core::hash::Hasher;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embassy_usb_driver::EndpointIn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::Write;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::WriteIter;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 18 other candidates\u001b[0m\n\n"}
{"message":"no method named `write_read` found for struct `embassy_rp::i2c::I2c` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":2012,"byte_end":2022,"line_start":68,"line_end":68,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        i2c.write_read(mcp23017::ADDR, &[GPIOB], &mut portb).unwrap();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following traits are implemented but not in scope; perhaps add a `use` for one of them:","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::blocking::i2c::WriteRead;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":294,"byte_end":294,"line_start":10,"line_end":10,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use defmt::*;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use embedded_hal_async::i2c::I2c;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"there is a method with a similar name","code":null,"level":"help","spans":[{"file_name":"src\\bin\\i2c_blocking.rs","byte_start":2012,"byte_end":2022,"line_start":68,"line_end":68,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        i2c.write_read(mcp23017::ADDR, &[GPIOB], &mut portb).unwrap();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"blocking_write_read","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `write_read` found for struct `embassy_rp::i2c::I2c` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\i2c_blocking.rs:68:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        i2c.write_read(mcp23017::ADDR, &[GPIOB], &mut portb).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is in scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::blocking::i2c::WriteRead;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal::i2c::I2c;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ use embedded_hal_async::i2c::I2c;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method with a similar name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        i2c.\u001b[0m\u001b[0m\u001b[38;5;10mblocking_write_read\u001b[0m\u001b[0m(mcp23017::ADDR, &[GPIOB], &mut portb).unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0433, E0463, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0433, E0463, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0433`.\u001b[0m\n"}
