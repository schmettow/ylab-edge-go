{"message":"cannot find function `set_max_level` in crate `log`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs","byte_start":39264,"byte_end":39297,"line_start":1268,"line_end":1268,"column_start":1,"column_end":34,"is_primary":false,"text":[{"text":"pub fn max_level() -> LevelFilter {","highlight_start":1,"highlight_end":34}],"label":"similarly named function `max_level` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4305,"byte_end":4318,"line_start":141,"line_end":141,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"            let _ = ::log::set_logger_racy(&LOGGER).map(|()| log::set_max_level($l));","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\bin\\usb_logger.rs","byte_start":676,"byte_end":754,"line_start":24,"line_end":24,"column_start":5,"column_end":83,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);","highlight_start":5,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_usb_logger::run!","def_site_span":{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4062,"byte_end":4078,"line_start":137,"line_end":137,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! run {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a function with a similar name exists","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4305,"byte_end":4318,"line_start":141,"line_end":141,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"            let _ = ::log::set_logger_racy(&LOGGER).map(|()| log::set_max_level($l));","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":"max_level","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src\\bin\\usb_logger.rs","byte_start":676,"byte_end":754,"line_start":24,"line_end":24,"column_start":5,"column_end":83,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);","highlight_start":5,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"embassy_usb_logger::run!","def_site_span":{"file_name":"C:\\Users\\martin\\.cargo\\git\\checkouts\\embassy-9312dcb0ed774b29\\f2c2536\\embassy-usb-logger\\src\\lib.rs","byte_start":4062,"byte_end":4078,"line_start":137,"line_end":137,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! run {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find function `set_max_level` in crate `log`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usb_logger.rs:24:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a function with a similar name exists: `max_level`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs:1268:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn max_level() -> LevelFilter {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14msimilarly named function `max_level` defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `embassy_usb_logger::run` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this function takes 0 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src\\bin\\usb_logger.rs","byte_start":722,"byte_end":744,"line_start":24,"line_end":24,"column_start":51,"column_end":73,"is_primary":false,"text":[{"text":"    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);","highlight_start":51,"highlight_end":73}],"label":"unexpected argument of type `LevelFilter`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\bin\\usb_logger.rs","byte_start":707,"byte_end":721,"line_start":24,"line_end":24,"column_start":36,"column_end":50,"is_primary":true,"text":[{"text":"    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);","highlight_start":36,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs","byte_start":39271,"byte_end":39280,"line_start":1268,"line_end":1268,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"pub fn max_level() -> LevelFilter {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"src\\bin\\usb_logger.rs","byte_start":722,"byte_end":744,"line_start":24,"line_end":24,"column_start":51,"column_end":73,"is_primary":true,"text":[{"text":"    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);","highlight_start":51,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: this function takes 0 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\bin\\usb_logger.rs:24:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    embassy_usb_logger::run!(1024, log::max_level(log::LevelFilter::Info), driver);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------------\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14munexpected argument of type `LevelFilter`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove the extra argument\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\martin\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\log-0.4.19\\src\\lib.rs:1268:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn max_level() -> LevelFilter {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0061, E0425.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
